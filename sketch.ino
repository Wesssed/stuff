#include <ArduinoJson.h>
#include <ArduinoJson.hpp>
#include <Ticker.h>
Ticker ticker;
#include <Wire.h>
#define _LCD_TYPE 1
#include <LCD_1602_RUS_ALL.h>
#include <font_LCD_1602_RUS.h>
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
ESP8266WebServer server(80); 
LCD_1602_RUS lcd(0x27,16,2);
bool BACKLIGHT = false; 

void newdisplay(String msg){
  if (BACKLIGHT == false){ // –Ø–∫—â–æ –¥–æ —Ü—å–æ–≥–æ –º–æ–º–µ–Ω—Ç—É –¥–∏—Å–ø–ª–µ–π –±—É–≤ –≤–∏–º–∫–Ω–µ–Ω–∏–π, –≤—ñ–Ω –≤–º–∏–∫–∞—î—Ç—å—Å—è 
    lcd.backlight();
    BACKLIGHT = true;
    delay(100);
  }

  int textlen = msg.length();// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É (n)

  lcd.print(msg); // –í–∏–≤—ñ–¥ —Ç–µ–∫—Å—Ç—É –Ω–∞ –¥–∏—Å–ø–ª–µ–π
  lcd.setCursor(0,0);

  for (int positionCounter = 0; positionCounter < textlen; positionCounter++) { // –ü—Ä–∏–Ω—Ü–∏–ø —Ä–æ–±–æ—Ç–∏ —Ü—å–æ–≥–æ –±–ª–æ–∫—É —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ –∑–º—ñ—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤–ª—ñ–≤–æ n - –ø–æ–≤—Ç–æ—Ä—ñ–≤, –¥–µ n - –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ.
    lcd.scrollDisplayLeft();
    delay(500); 

    if(positionCounter == textlen - 1){ // –ö–æ–ª–∏ —É–≤–µ—Å—å —Ç–µ–∫—Å—Ç "–∑–∞—Ö–æ–≤–∞–≤—Å—è" –≤–ª—ñ–≤–æ, –¥–∏—Å–ø–ª–µ–π –æ—á–∏—â–∞—î—Ç—å—Å—è, –¥–∞—é—á–∏ –¥–æ–∑–≤—ñ–ª –Ω–∞ –π–æ–≥–æ –≤–∏–º–∫–Ω–µ–Ω–Ω—è
      lcd.clear();
      BACKLIGHT = false;
    }
  }
    
   
}

void staticdisplay(String msg){

  if (BACKLIGHT == false){
    lcd.backlight();
    BACKLIGHT = true;
    delay(100);
  }

  int textlen = msg.length();

  String firsthalf;
  String secondhalf;

  if (textlen > 16){
    firsthalf =  msg.substring(0, 16);
    secondhalf = msg.substring(16);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print(firsthalf);

    lcd.setCursor(0,1);
    lcd.print(secondhalf);
    
  }else{
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print(msg);
  }

    delay(3750); //3500

    BACKLIGHT = false;
}


void AutoLightoff() {
  if (BACKLIGHT == false){
    lcd.noBacklight();
    lcd.clear();
  }
}

void setup() {
  Serial.begin(115200);

  WiFi.mode(WIFI_AP);
  WiFi.softAP("===> 192.168.4.1 <==="); // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Wi-Fi –º–µ—Ä–µ–∂—ñ —ñ–∑ –∑–∞–¥–∞–Ω–∏–º —ñ–º'—è–º

  
  lcd.init();
  lcd.backlight();
  lcd.setCursor(2, 0);
  lcd.print("Wi-Fi Texter");
  delay(2333);
  lcd.clear();
  lcd.noBacklight();
  lcd.setCursor(0, 0);

  // WIFI ACCESS POINT
  

  
 

  // WEB - PAGE
const char *htmlpage =
"<!DOCTYPE html>"
"<html>"
"<head>"
"    <meta charset='UTF-8'>"
"    <title>–í–∏–≤—ñ–¥ —Ç–µ–∫—Å—Ç—É –Ω–∞ –¥–∏—Å–ø–ª–µ–π</title>"
"    <style>"
"        html, body{"
"            background-color: rgb(59, 59, 59);"
"            height: 100%;"
"        }"
"        .main{"
"            position: absolute;"
"            top: 25%;"
"            left: 50%;"
"            height: 12%;"
"           transform: translate(-50%, -50%);"
"        }"
"        input[type=\"text\"]{"
"            border-radius: 9px;"
""
"            width: 75vw;"
"            height: 5vh;"
""
"            font-size: larger;"
"        }"
"        .btinfo{"
"            border-radius: 9px;"
" "
"            width: 15vw;"
"            height: 5vh;"
""
"            position: absolute;"
"            top: 95%;"
"            left: 85%;"
"            transform: translate(-50%, 50%);"
"        }"
"        .bt1{"
"            border-radius: 9px;"
" "
"            width: 25vw;"
"            height: 5vh;"
""
"            position: absolute;"
"            top: 95%;"
"            left: 20%;"
"            transform: translate(-50%, 50%);"
"        }"
"        .bt2{"
"            border-radius: 9px;"
" "
"            width: 25vw;"
"            height: 5vh;"
""
"            position: absolute;"
"            top: 95%;"
"            left: 55%;"
"            transform: translate(-50%, 50%);"
"        }"
"    </style>"
"</head>"
"<body>"
""
"    <div class=\"main\">"
"        <h2></h2>"
"            <input type='text' name='usertext' placeholder=\"Your text here...\">"
"            <br><br>"
"            <input type='button' class='bt1'  value='–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ ‚è™' onclick=\"SendText()\">"
"            "
"            <input type='button' class='bt2' value='–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ üì§' onclick=\"SendTextStatic()\">"
"            "
"            <input type='button' class='btinfo'  value='‚ùì' onclick=\"ShowInfo()\">"
"    </div>"
""
"    <script>"
"        const ShowInfo = () => alert('‚ùï –ö–∏—Ä–∏–ª–∏—á–Ω—ñ —Å–∏–º–≤–æ–ª–∏ —ñ–Ω–æ–¥—ñ –º–æ–∂—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ\\n \\n‚è™ - –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–ª–∞–≤–∞—é—á–æ–≥–æ —Ç–µ–∫—Å—Ç—É (–ú–∞–∫—Å. 40 —Å–∏–º–≤–æ–ª—ñ–≤) \\n \\nüì§ - –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É (–ú–∞–∫—Å. 32 —Å–∏–º–≤–æ–ª—ñ–≤)');"
"        let matfilter = (msg) => { "
"            return msg;"
"        };"
""
""             
"           const changelet = (msg) => {"
"            const letters = {'—ñ': 'i', '–Ü': 'I', '—Å': 'c', '–°': 'C', '–∞': 'a', '–ê': 'A', '–µ': 'e', '–ï': 'E', '–æ': 'o', '–û': 'O', '—Ä': 'p', '–†': 'P', '—Ö': 'x', '–•': 'X', '–¢': 'T', '–í': 'B', '–ú': 'M', '–ö': 'K'};"
""
"                for (let key in letters){"
"                    var pattern = new RegExp(key, 'g');"
"                    msg = msg.replace(pattern, letters[key]);"
"                }"
""
"                return msg;"
"            };"
""
""
"        const SendText = () => {"
""
"            const text = document.getElementsByName('usertext')[0].value;"
"             if (text.length == 0) {"
"                         alert('‚ö†Ô∏è –¶–µ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. ‚ö†Ô∏è');"
"                        return"
"              };"
"             if (text.length > 40) {"
"                         alert('‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—ñ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª—ñ–≤ ‚ö†Ô∏è');"
"                        return"
"              };"
""
"            const words = text.split(' ');"
""
"            const filteredtext = [];"
"            words.forEach(word => {"
""
"                filteredtext.push(matfilter(word));"
"            });"
""
"            let resultText = filteredtext.join(' ');"
"            resultText = changelet(resultText);"
""
"            fetch('/SendText', {"
"                method: 'POST',"
"                headers: {"
"                    'Content-Type': 'application/json;charset=utf-8'"
"                },"
"                body: JSON.stringify(resultText)"
"            });"
""
"            document.getElementsByName('usertext')[0].value = '';"
"            alert('üì® –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:\\n'+resultText);"
"            console.log(`${resultText} [${resultText.length}]`);"
"        };"
""
"        const SendTextStatic = () => {"
""
"            const text = document.getElementsByName('usertext')[0].value;"
"             if (text.length == 0) {"
"                         alert('‚ö†Ô∏è –¶–µ –ø–æ–ª–µ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º. ‚ö†Ô∏è');"
"                        return"
"              };"
"             if (text.length > 32) {"
"                         alert('‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—ñ–ª—å—à–µ 32 —Å–∏–º–≤–æ–ª—ñ–≤ ‚ö†Ô∏è');"
"                        return"
"              }"
""
"            const words = text.split(' ');"
""
"            const filteredtext = [];"
"            words.forEach(word => {"
""
"                filteredtext.push(matfilter(word));"
"            });"
""
"            let resultText = filteredtext.join(' ');"
"            resultText = changelet(resultText);"
""
"            fetch('/SendStaticText', {"
"                method: 'POST',"
"                headers: {"
"                    'Content-Type': 'application/json;charset=utf-8'"
"                },"
"                body: JSON.stringify(resultText)"
"            });"
""
"            document.getElementsByName('usertext')[0].value = '';"
"            alert('üì® –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:\\n'+resultText);"
"            console.log(`${resultText} [${resultText.length}]`);"
"        };"
""
"    </script>"
"</body>"
"</html>";

// WEB - SERVER
  server.on("/",  [htmlpage](){ // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –Ω–∞ 192.168.4.1 (–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞)
    server.send(200, "text/html", htmlpage); // –ü—Ä–∏—Å—Ç—Ä—ñ–π(–°–µ—Ä–≤–µ—Ä) –≤—ñ–¥—Å–∏–ª–∞—î —Å—Ç–æ—Ä—ñ–Ω–∫—É
  });

  server.on("/SendText", HTTP_POST, []() { // –û—Ç—Ä–∏–º–∞–Ω–Ω—è POST –∑–∞–ø–∏—Ç—É —ñ–∑ —Ç–µ–∫—Å—Ç–æ–º  (–ü–ª–∞–≤–∞—é—á–∏–π —Ç–µ–∫—Å—Ç)

    if (server.hasArg("plain")){

      String strtext = server.arg("plain"); 
      if (strtext.length() >= 2) {
        strtext = strtext.substring(0, strtext.length() - 1);
      }

        newdisplay(strtext); // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–∞ –¥–∏—Å–ø–ª–µ—ó
    }
  });


  server.on("/SendStaticText", HTTP_POST, []() { // –û—Ç—Ä–∏–º–∞–Ω–Ω—è POST –∑–∞–ø–∏—Ç—É —ñ–∑ —Ç–µ–∫—Å—Ç–æ–º (–°—Ç–∞—Ç–∏—á–Ω–∏–π —Ç–µ–∫—Å—Ç)

     if (server.hasArg("plain")){
  
      String strtext = server.arg("plain"); 
      if (strtext.length() >= 2) {
        strtext = strtext.substring(1, strtext.length() - 1);
      }
      
      staticdisplay(strtext); // –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –Ω–∞ –¥–∏—Å–ø–ª–µ—ó
    }

  });

  server.begin(); // –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä—É

  ticker.attach(15, AutoLightoff); // –¢–∞–π–º–µ—Ä –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É –Ω–∞ –¥–∏—Å–ø–ª–µ—ó, –≤ —ñ–Ω–∞–∫—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –¥–∏—Å–ø–ª–µ–π –≤–∏–º–∫–Ω–µ—Ç—Å—è 

  
}

void loop() {
  server.handleClient();
}
